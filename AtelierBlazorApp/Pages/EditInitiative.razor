@page "/edit/{Id:int}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using AtelierBlazorApp.Services
@using Microsoft.AspNetCore.Components.Forms
@using AtelierShared.Models
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json

<style>
    .home-content {
        text-align: center;
        color: #76C2AF;
        font-family: Arial, sans-serif;
        padding: 20px;
    }
</style>

<div class="container my-5">
    @if (!isLoggedIn)
    {
        <div class="home-content">
            <h1>You need to log in to edit an initiative.</h1>
            <button class="btn btn-primary m-2" @onclick="NavigateToLogin">Login</button>
            <button class="btn btn-secondary m-2" @onclick="NavigateToRegister">Register</button>
        </div>
    }
    else
    {
        <div class="home-content">
            <h1>Edit Initiative</h1>
            <p>Update your initiative details below.</p>
        </div>

        <EditForm Model="@initiativePost" OnValidSubmit="SubmitEditedInitiative" class="card shadow p-4">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="initiativePost.Title" class="form-control" placeholder="Enter title" />
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">Content:</label>
                <InputTextArea id="content" @bind-Value="initiativePost.Content" class="form-control" rows="5" placeholder="Describe your initiative"></InputTextArea>
            </div>

            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <InputSelect id="category" @bind-Value="initiativePost.CategoryId" class="form-control">
                    <option value="0">-- Select Category --</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Category</option>
                    }
                </InputSelect>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-lg">Save Changes</button>
            </div>
        </EditForm>
    }

    <div class="text-center mt-4">
        <button class="btn btn-danger" @onclick="Logout">Log Out</button>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private InitiativePost initiativePost = new();
    private bool isLoggedIn = false;
    private List<CategoryModel> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await AuthService.IsUserLoggedIn();

        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/account");
        }
        else
        {
            await LoadCategoriesAsync();
            await LoadInitiativeToEdit();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<CategoryModel>>("https://localhost:5062/api/Categories");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task LoadInitiativeToEdit()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:5062/api/InitiativePosts/{Id}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                initiativePost = await response.Content.ReadFromJsonAsync<InitiativePost>();
            }
            else
            {
                Console.WriteLine($"Failed to load initiative: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initiative: {ex.Message}");
        }
    }

    private async Task SubmitEditedInitiative()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();

            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("Token is missing.");
                Navigation.NavigateTo("/auth/login");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Put, $"https://localhost:5062/api/InitiativePosts/{Id}");
            request.Content = JsonContent.Create(initiativePost);
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Initiative updated successfully!");
                Navigation.NavigateTo("/account");
            }
            else
            {
                Console.WriteLine($"Failed to update initiative: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating initiative: {ex.Message}");
        }
    }

    private async Task Logout()
    {
        await AuthService.Logout();
        isLoggedIn = false;
        Navigation.NavigateTo("/auth/login");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/auth/login");
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/auth/register");
    }
}
