@page "/write"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using Microsoft.AspNetCore.Components.Forms
@using AtelierShared.Models
@using System.Net.Http.Headers
@using System.Net.Http
@using System.Text
@using System.Net.Http.Json
@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using AtelierBlazorApp.Services


<style>
    .home-content {
        text-align: center;
        color: #76C2AF;
        font-family: Arial, sans-serif;
        padding: 20px;
    }
</style>

<div class="container my-5">
    @if (!isLoggedIn)
    {
        <div class="home-content">
            <h1>You need to log in or create an account to write an initiative.</h1>
            <button class="btn btn-primary m-2" @onclick="NavigateToLogin">Login</button>
            <button class="btn btn-secondary m-2" @onclick="NavigateToRegister">Register</button>
        </div>
    }
    else
    {
        <div class="home-content">
            <h1><b>Propose Your Initiative</b></h1>
            <p>Share your ideas for innovation, sustainability, and progress with the community.</p>
        </div>

        <EditForm Model="@initiativePost" OnValidSubmit="SubmitInitiative" class="card shadow p-4">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="mb-3">
                <label for="title" class="form-label">Title:</label>
                <InputText id="title" @bind-Value="initiativePost.Title" class="form-control" placeholder="Enter the title of your initiative" />
            </div>

            <div class="mb-3">
                <label for="content" class="form-label">Content:</label>
                <InputTextArea id="content" @bind-Value="initiativePost.Content" class="form-control" rows="5" placeholder="Describe your initiative here"></InputTextArea>
            </div>

            <div class="mb-3">
                <label for="category" class="form-label">Category:</label>
                <InputSelect id="category" @bind-Value="initiativePost.CategoryId" class="form-control">
                    <option value="0">-- Select a Category --</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Category</option>
                    }
                </InputSelect>
            </div>

            <div class="text-center">
                <button type="submit" class="btn btn-primary btn-lg px-5">Submit</button>
            </div>
        </EditForm>
    }

    <div class="text-center mt-4">
        <button class="btn btn-danger" @onclick="Logout">Log Out</button>
    </div>
</div>

@code {
    private InitiativePost initiativePost = new InitiativePost();
    private bool isLoggedIn = false;
    private List<CategoryModel> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await AuthService.IsUserLoggedIn();

        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/account");
        }
        else
        {
            await LoadCategoriesAsync();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        try
        {
            Categories = await Http.GetFromJsonAsync<List<CategoryModel>>("https://localhost:5062/api/Categories");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load categories: {ex.Message}");
        }
    }

    private async Task SubmitInitiative()
{
    try
    {
        var token = await AuthService.GetTokenAsync();

        if (string.IsNullOrEmpty(token))
        {
            Console.WriteLine("No token found. Redirecting to login.");
            Navigation.NavigateTo("/Auth/login");
            return;
        }

        // Decode the token to extract the UserId
        var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(token);
        var userIdClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == JwtRegisteredClaimNames.Sub);

        if (userIdClaim == null)
        {
            Console.WriteLine("User ID claim not found in token.");
            return;
        }

        var userId = int.Parse(userIdClaim.Value);
        initiativePost.AuthorId = userId;

        // Prepare the payload
        var payload = new
        {
            Title = initiativePost.Title,
            Content = initiativePost.Content,
            AuthorId = initiativePost.AuthorId, //backend igonres it
            CategoryId = initiativePost.CategoryId,
            Category = new
    {
        Id = initiativePost.CategoryId, // Include the Category object with Id
        Category = Categories.FirstOrDefault(c => c.Id == initiativePost.CategoryId)?.Category // Include the name
    }
        };

    


        // Create the HTTP request
        var request = new HttpRequestMessage(HttpMethod.Post, "https://localhost:5062/api/InitiativePost");
        request.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("Initiative submitted successfully!");
            initiativePost = new InitiativePost(); // Reset form after submission
            Navigation.NavigateTo("/initiatives");
        }
        else
        {
            var errorDetails = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Failed to submit initiative: {response.StatusCode} - {errorDetails}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error submitting initiative: {ex.Message}");
    }
}

    private string FixBase64String(string input)
{
    switch (input.Length % 4)
    {
        case 2: input += "=="; break;
        case 3: input += "="; break;
    }
    return input;
}


    private string? GetUserIdFromToken(string token)
{
    if (string.IsNullOrEmpty(token))
        return null;

    try
    {
        var payload = token.Split('.')[1];
        var jsonBytes = Convert.FromBase64String(FixBase64String(payload));
        var json = Encoding.UTF8.GetString(jsonBytes);
        var userData = JsonSerializer.Deserialize<Dictionary<string, object>>(json);

        // Extract the 'sub' claim as the user ID
        return userData != null && userData.ContainsKey("sub") ? userData["sub"]?.ToString() : null;
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error decoding token: {ex.Message}");
        return null;
    }
}

    private async Task Logout()
    {
        await AuthService.Logout();
        isLoggedIn = false;
        Navigation.NavigateTo("/Auth/login");
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/Auth/login");
    }

    private void NavigateToRegister()
    {
        Navigation.NavigateTo("/Auth/register");
    }
}
